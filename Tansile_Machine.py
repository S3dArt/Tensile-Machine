# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'guiLaba.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtSerialPort
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
import sys
import os
from random import randint

# import serial
# from serial.tools import list_ports


class Ui_MainWindow(object):


    def setupUi(self, QMainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(800, 600)
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("QMainWindow{\n"
"    color: white;\n"
"    background-color: #fb5d5d;\n"
"}\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: #22222e;\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.graphWidget = PlotWidget(self.centralwidget)
        self.graphWidget.setGeometry(QtCore.QRect(20, 20, 761, 241))
        self.graphWidget.setObjectName("graphWidget")
        
        self.dataSerial1 = 0
        self.dataSerial2 = 0
        #Graph style
        self.x = []  # 100 time points
        self.y = []  # 100 data points
        self.graphWidget.setBackground('w')
        self.graphWidget.setLabel('left', "<span style=\"color:red;font-size:20px\">Сила (Н)</span>")
        self.graphWidget.setLabel('bottom', "<span style=\"color:red;font-size:20px\">Расстяжение (мм)</span>")
        self.pen = pg.mkPen(color=(255, 0, 0), width=3)
        self.graphWidget.showGrid(x=True, y=True)


        # plot data: x, y values
        #self.data_line = self.plot(self.x, self.y, pen)


        #update graph
        # self.data_line = self.plot(self.x, self.y, self.pen)
        # self.timer = QtCore.QTimer()
        # self.timer.setInterval(50)
        # self.timer.timeout.connect(self.update_plot_data)
        # self.timer.start()
        
    
        self.connectBox = QtWidgets.QGroupBox(self.centralwidget)
        self.connectBox.setGeometry(QtCore.QRect(20, 310, 191, 171))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.connectBox.setFont(font)
        self.connectBox.setStyleSheet("color: white;\n"
"")
        self.connectBox.setObjectName("connectBox")
        self.updateComButton = QtWidgets.QPushButton(self.connectBox)
        self.updateComButton.setGeometry(QtCore.QRect(20, 30, 151, 71))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.updateComButton.sizePolicy().hasHeightForWidth())
        self.updateComButton.setSizePolicy(sizePolicy)
        self.updateComButton.setMaximumSize(QtCore.QSize(15555, 16777215))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.updateComButton.setFont(font)
        self.updateComButton.setAcceptDrops(False)
        self.updateComButton.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #fb5d5d;\n"
"    border-radius: 30;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    background-color: #fa4244\n"
"}")
        self.updateComButton.setCheckable(False)
        self.updateComButton.setAutoRepeat(False)
        self.updateComButton.setAutoExclusive(False)
        self.updateComButton.setAutoDefault(False)
        self.updateComButton.setDefault(False)
        self.updateComButton.setFlat(False)
        self.updateComButton.setObjectName("updateComButton")
        self.connectComButton = QtWidgets.QPushButton(self.connectBox)
        self.connectComButton.setGeometry(QtCore.QRect(20, 110, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.connectComButton.setFont(font)
        self.connectComButton.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #fb5d5d;\n"
"    border-radius: 30;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    background-color: #fa4244\n"
"}")
        self.connectComButton.setObjectName("connectComButton")
        self.portBox = QtWidgets.QGroupBox(self.centralwidget)
        self.portBox.setGeometry(QtCore.QRect(20, 480, 191, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.portBox.setFont(font)
        self.portBox.setStyleSheet("color: white;")
        self.portBox.setObjectName("portBox")
        self.portComboBox = QtWidgets.QComboBox(self.portBox)
        self.portComboBox.setGeometry(QtCore.QRect(10, 30, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.portComboBox.setFont(font)
        self.portComboBox.setStyleSheet("QComboBox{\n"
"    color: white;\n"
"    background-color: #fb5d5d;\n"
"}\n"
"")
        self.portComboBox.setObjectName("portComboBox")
        self.portComboBox.addItem("")
        self.portComboBox.addItem("")
        self.readingInstrumentBox = QtWidgets.QGroupBox(self.centralwidget)
        self.readingInstrumentBox.setGeometry(QtCore.QRect(220, 330, 571, 221))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.readingInstrumentBox.setFont(font)
        self.readingInstrumentBox.setStyleSheet("color: white;\n"
"")
        self.readingInstrumentBox.setObjectName("readingInstrumentBox")
        self.tensoBox = QtWidgets.QGroupBox(self.readingInstrumentBox)
        self.tensoBox.setGeometry(QtCore.QRect(20, 40, 261, 171))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.tensoBox.setFont(font)
        self.tensoBox.setStyleSheet("color: white;")
        self.tensoBox.setObjectName("tensoBox")
        self.valueTensoLcd = QtWidgets.QLCDNumber(self.tensoBox)
        self.valueTensoLcd.setGeometry(QtCore.QRect(20, 40, 221, 101))
        self.valueTensoLcd.setObjectName("valueTensoLcd")
        self.distanceBox = QtWidgets.QGroupBox(self.readingInstrumentBox)
        self.distanceBox.setGeometry(QtCore.QRect(290, 40, 261, 171))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.distanceBox.setFont(font)
        self.distanceBox.setStyleSheet("color: white;")
        self.distanceBox.setObjectName("distanceBox")
        self.valueDistanceLcd = QtWidgets.QLCDNumber(self.distanceBox)
        self.valueDistanceLcd.setGeometry(QtCore.QRect(20, 40, 221, 101))
        self.valueDistanceLcd.setObjectName("valueDistanceLcd")
        self.startGraph = QtWidgets.QPushButton(self.centralwidget)
        self.startGraph.setGeometry(QtCore.QRect(420, 280, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.startGraph.setFont(font)
        self.startGraph.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #fb5d5d;\n"
"    border-radius: 30;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    background-color: #fa4244\n"
"}")
        self.startGraph.setObjectName("startGraph")
        self.clearGraph = QtWidgets.QPushButton(self.centralwidget)
        self.clearGraph.setGeometry(QtCore.QRect(630, 280, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.clearGraph.setFont(font)
        self.clearGraph.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #fb5d5d;\n"
"    border-radius: 30;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    background-color: #fa4244\n"
"}")
        self.clearGraph.setObjectName("clearGraph")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.retranslateUi(MainWindow)
        #Ожидание нажатия кнопки старт измерения
        self.startGraph.clicked.connect(self.startGraphButton)

        #Очистить график
        self.clearGraph.clicked.connect(self.clearGraphButton)


        #Нажатие на Обновить конфигурацию
        self.updateComButton.clicked.connect(self.updateComPort)

        #Подлючиться к ком порту
        self.connectComButton.clicked.connect(self.connectComPort)

        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def startGraphButton(self):
        if self.startGraph.text() == "Начать измерения" and self.connectComButton.text() == "Отключиться":
                try:
                    self.data_line = self.plot(self.x, self.y, self.pen)
                    self.timer = QtCore.QTimer()
                    self.timer.setInterval(50)
                    self.timer.timeout.connect(self.update_plot_data)
                    self.timer.start()
                    font = QtGui.QFont()
                    font.setFamily("Arial")
                    font.setPointSize(12)
                    font.setBold(True)
                    font.setWeight(75)
                    self.startGraph.setFont(font)
                    self.startGraph.setText("Остановить измерения")
                except:
                    print("Ошибка при нажатии на начать измерение")
                    

        else:
                self.timer.stop()
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(14)
                font.setBold(True)
                font.setWeight(75)
                self.startGraph.setFont(font)
                self.startGraph.setText("Начать измерения")
    

    def plot(self, dateX, dateY, pen):
        return self.graphWidget.plot(dateX, dateY, pen=pen)

    def update_plot_data(self):
        if len(self.x) >= 4328000:
            self.x = self.x[1:] # Remove the first y element.
            self.x.append(self.x[-1] + 10) # Add a new value 1 higher than the last.
        else:
            if len(self.x) != 0:
                self.x.append(self.x[-1] + 10)
            else:
                self.x.append(self.dataSerial1)
        
        if len(self.y) >= 4328000:
            self.y = self.y[1:] # Remove the first element
            self.y.append(self.dataSerial2) # Add a new random value.
        else:
            if len(self.y) == 0:
                self.y.append(self.dataSerial2)
            else:
                self.y.append(self.dataSerial2)
        self.data_line.setData(self.x, self.y) #Update the datac


    def clearGraphButton(self):
        self.graphWidget.clear()


    #Функция для обновления ком портов
    def updateComPort(self):
        try:
            self.portComboBox.clear()
            for info in QtSerialPort.QSerialPortInfo.availablePorts():
                self.portComboBox.addItem(info.portName())
        except:
            print("Чёт не так")

    #@QtCore.pyqtSlot()
    def connectComPort(self):
        if self.connectComButton.text() == "Подключиться":
            if self.portComboBox.currentText() != '':
                self.connectComButton.setText("Отключиться")
                print("Проверили не пустой ли комбо бокс")
                try:
                    print("Читаем сериал")
                    self.serial = QtSerialPort.QSerialPort(self.portComboBox.currentText(), baudRate=QtSerialPort.QSerialPort.Baud115200, readyRead=self.receive)
                    self.serial.open(QtCore.QIODevice.ReadWrite)

                except:
                    print("Подключение к ком порту провалилось")
                    self.disconnectFromPort()
               
        elif self.connectComButton.text() == "Отключиться":
            try:
                self.disconnectFromPort()
                self.connectComButton.setText("Подключиться")

            except:
                print("Не отключились от ком-порта")

                
    #@QtCore.pyqtSlot()
    def receive(self):
        while self.serial.canReadLine():
            text = self.serial.readLine().data().decode()
            text = text.rstrip('\r\n').split('%')
            print(text)
            self.valueDistanceLcd.display(text[0])
            self.valueTensoLcd.display(text[1])
            self.dataSerial2 = float(text[0])
            self.dataSerial1 = float(text[1])
            print(self.dataSerial1, self.dataSerial2)
            

    #@QtCore.pyqtSlot(bool)
    def disconnectFromPort(self):
        self.serial.close()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Разрывная машина"))
        self.connectBox.setTitle(_translate("MainWindow", "Подключение"))
        self.updateComButton.setText(_translate("MainWindow", "Обновить\n"
"конфигурацию\n"
"оборудования"))
        self.connectComButton.setText(_translate("MainWindow", "Подключиться"))
        self.portBox.setTitle(_translate("MainWindow", "Порт"))
        self.readingInstrumentBox.setTitle(_translate("MainWindow", "Показания приборов"))
        self.tensoBox.setTitle(_translate("MainWindow", "Тензодатчик, Н"))
        self.distanceBox.setTitle(_translate("MainWindow", "Расстояние, мм"))
        self.startGraph.setText(_translate("MainWindow", "Начать измерения"))
        self.clearGraph.setText(_translate("MainWindow", "Очистить"))


        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
